#!/usr/bin/env python3
"""
Test script to demonstrate the enhanced network_all.py module with malware detection
"""

import sys
import json
from network_all import PcapAnalyzer, MalwareDetector, ThreatIntelligence

def test_malware_detection_functionality():
    """Test malware detection capabilities"""
    print("Testing enhanced network_all.py with malware detection...")
    
    # Test 1: Create malware detector instance
    print("✓ Test 1: Creating malware detector instance")
    detector = MalwareDetector()
    threat_intel = ThreatIntelligence()
    print("  Malware detector created successfully")
    
    # Test 2: Test threat intelligence
    print("✓ Test 2: Testing threat intelligence")
    
    # Test domain checks
    malicious_result = threat_intel.is_malicious_domain("example.tk")  # suspicious TLD
    assert malicious_result == True
    print("  Suspicious TLD detection working")
    
    normal_result = threat_intel.is_malicious_domain("google.com")
    assert normal_result == False
    print("  Normal domain detection working")
    
    # Test entropy calculation
    entropy_high = threat_intel.calculate_domain_entropy("asdkjfaslkdjflaksjdflk")  # random string
    entropy_low = threat_intel.calculate_domain_entropy("google")  # normal word
    assert entropy_high > entropy_low
    print("  Domain entropy calculation working")
    
    # Test 3: Test HTTP malware detection
    print("✓ Test 3: Testing HTTP malware detection")
    
    # Test CobaltStrike user agent detection
    test_http_request = {
        "user_agent": "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)",
        "uri": "/test.php?id=1234567890abcdef",
        "host": "example.com"
    }
    
    detections = detector.analyze_http_request(test_http_request)
    cobalt_strike_detected = any(d.get("family") == "CobaltStrike" for d in detections)
    assert cobalt_strike_detected
    print("  CobaltStrike user agent detection working")
    
    # Test 4: Test DNS malware detection
    print("✓ Test 4: Testing DNS malware detection")
    
    # Test DNS tunneling detection
    test_dns_request = {
        "request": "very-long-suspicious-subdomain-with-lots-of-data-that-might-be-tunneling.example.com",
        "type": "TXT"
    }
    
    dns_detections = detector.analyze_dns_request(test_dns_request)
    tunneling_detected = any(d.get("type") == "dns_tunneling" for d in dns_detections)
    assert tunneling_detected
    print("  DNS tunneling detection working")
    
    # Test 5: Test beaconing detection
    print("✓ Test 5: Testing beaconing detection")
    
    # Simulate regular beaconing traffic
    test_connections = []
    base_time = 1000.0
    for i in range(10):
        conn = {
            "src": "192.168.1.100",
            "dst": "10.0.0.1",
            "dport": 443,
            "time": base_time + (i * 60)  # Every 60 seconds
        }
        test_connections.append(conn)
    
    beaconing_detections = detector.analyze_connection_patterns(test_connections)
    beaconing_detected = any(d.get("indicator") == "beaconing" for d in beaconing_detections)
    assert beaconing_detected
    print("  Beaconing detection working")
    
    # Test 6: Test comprehensive analysis
    print("✓ Test 6: Testing comprehensive analysis")
    
    # Create mock PCAP results
    mock_pcap_results = {
        "http": [test_http_request],
        "dns": [test_dns_request],
        "tcp": test_connections,
        "udp": []
    }
    
    comprehensive_results = detector.analyze_all(mock_pcap_results)
    assert comprehensive_results["threat_score"]["normalized_score"] > 0
    assert len(comprehensive_results["detections"]) > 0
    print("  Comprehensive analysis working")
    print(f"    Threat score: {comprehensive_results['threat_score']['normalized_score']:.1f}")
    print(f"    Risk level: {comprehensive_results['threat_score']['risk_level']}")
    print(f"    Total detections: {comprehensive_results['detection_summary']['total_detections']}")
    
    # Test 7: Test analyzer with malware detection enabled
    print("✓ Test 7: Testing enhanced PcapAnalyzer")
    options = {
        "resolve_dns": False,
        "country_lookup": False,
        "safelist_dns": False,
        "enable_malware_detection": True
    }
    analyzer = PcapAnalyzer("nonexistent.pcap", options)
    assert analyzer.malware_detector is not None
    print("  Enhanced analyzer created successfully")
    
    print("\n✅ All malware detection tests passed!")
    print("\nNew features added:")
    print("- Advanced malware family detection (CobaltStrike, Emotet, TrickBot, QakBot)")
    print("- Network-based threat intelligence and IOC detection")
    print("- DNS tunneling detection with entropy analysis")
    print("- C2 beaconing pattern detection")
    print("- Behavioral analysis for suspicious network activities")
    print("- Protocol anomaly detection")
    print("- Comprehensive threat scoring and risk assessment")
    print("- Enhanced output format with malware analysis results")
    
    print("\nExample usage with malware detection:")
    print("1. Full analysis:")
    print("   python network_all.py capture.pcap -o results.json")
    print("")
    print("2. Threat-only analysis:")
    print("   python network_all.py capture.pcap --threat-only -o threats.json")
    print("")
    print("3. Disable malware detection:")
    print("   python network_all.py capture.pcap --disable-malware-detection")
    
    # Show example output format
    print("\nExample output format:")
    example_output = {
        "pcap_sha256": "abc123...",
        "analysis_timestamp": "2024-01-15T10:30:00",
        "analyzer_version": "2.0",
        "hosts": ["192.168.1.1"],
        "domains": ["example.com"],
        "malware_analysis": {
            "threat_score": {
                "normalized_score": 75.0,
                "risk_level": "HIGH",
                "detection_count": 5
            },
            "malware_families": ["CobaltStrike"],
            "detection_summary": {
                "total_detections": 5,
                "critical_detections": 1,
                "high_detections": 2,
                "medium_detections": 2,
                "low_detections": 0
            }
        },
        "threat_intelligence": {
            "malicious_domains_contacted": ["evil.tk"],
            "malicious_ips_contacted": [],
            "iocs": [
                {
                    "type": "user_agent",
                    "value": "Mozilla/4.0...",
                    "severity": "high",
                    "description": "User agent matches CobaltStrike pattern"
                }
            ]
        }
    }
    
    print(json.dumps(example_output, indent=2))

if __name__ == "__main__":
    test_malware_detection_functionality()